# %%
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, accuracy_score, classification_report, confusion_matrix,r2_score


# %%
df = pd.read_csv("AirQualityUCI.csv",sep=";",decimal=",",low_memory=False)
df.head()   


# %%
df.shape

# %%
df.describe()

# %%
df = df.replace(-200,np.nan)

# %%
df.describe()

# %%
df.info()

# %%
df = df.drop(columns=["Unnamed: 15","Unnamed: 16"])
df = df.dropna()
print(df.info())
print(df.shape)


# %%
sns.pairplot(df)
plt.show()

# %%
x = df[['T', 'RH', 'AH', 
        'PT08.S1(CO)', 'PT08.S2(NMHC)', 
        'PT08.S3(NOx)', 'PT08.S4(NO2)', 'PT08.S5(O3)']]

y = df[['CO(GT)', 'NO2(GT)', 'NMHC(GT)']]


# %%
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.30, random_state = 42)

# %%
lr = LinearRegression()
lr.fit(x_train,y_train)
lr.score(x_test,y_test)

# %%
predict= lr.predict(x)
y_pred = lr.predict(x_test)
print(predict)

# %%
pred_df = pd.DataFrame(predict, columns=['Predicted_CO', 'Predicted_NO2', 'Predicted_NMHC'])
pred_df.head()

# %%
plt.figure(figsize=(18, 5))

for i, col in enumerate(y.columns):
    plt.subplot(1, 3, i+1)
    plt.scatter(y[col], pred_df.iloc[:, i], alpha=0.5, color="blue")
    plt.plot([y[col].min(), y[col].max()], 
             [y[col].min(), y[col].max()], "r--", linewidth=2)
    plt.xlabel(f"Actual {col}")
    plt.ylabel(f"Predicted {col}")
    plt.title(f"Y vs Predicted - {col}")


plt.show()

# %%
results = {"Pollutant": [], "Model": [], "RMSE": [], "R2": []}

# %%
y_pred_lin = lr.predict(x_test)   # predict only on test data
# Linear Regression metrics
mse_lin = mean_squared_error(y_test.iloc[:, i], y_pred_lin[:, i])
rmse_lin = np.sqrt(mse_lin)
r2_lin = r2_score(y_test.iloc[:, i], y_pred_lin[:, i])
results["Pollutant"].append(col)
results["Model"].append("Linear Regression")
results["RMSE"].append(rmse_lin)
results["R2"].append(r2_lin)


# %%
for i,col in enumerate(y.columns):
    plt.figure(figsize= (7,5))
    plt.scatter(y_test.iloc[:,i],y_pred_lin[:,i],alpha=0.5,color = "green")
    plt.plot([y_test.iloc[:, i].min(), y_test.iloc[:, i].max()],
             [y_test.iloc[:, i].min(), y_test.iloc[:, i].max()],
             "r--", linewidth=2)
    plt.xlabel(f"Actual {col}")
    plt.ylabel(f"Predicted {col}")
    plt.title(f"Y_test vs Predicted {col}")
    plt.show()

# %%
df = pd.concat([df.reset_index(drop=True), pred_df], axis=1)

# %%
df.head()

# %%
knn_model = KNeighborsRegressor()
knn_model.fit(x_train,y_train)
print("Score : ",knn_model.score(x_test,y_test))
y_pred_knn = knn_model.predict(x_test)

# %%
for i, col in enumerate(y.columns):
    mse_knn = mean_squared_error(y_test.iloc[:, i], y_pred_knn[:, i])
    rmse_knn = np.sqrt(mse_knn)
    r2_knn = r2_score(y_test.iloc[:, i], y_pred_knn[:, i])
    results["Pollutant"].append(col)
    results["Model"].append("KNN Regression (k=5)")
    results["RMSE"].append(rmse_knn)
    results["R2"].append(r2_knn)
results_df = pd.DataFrame(results)
print(results_df)

# %%
plt.figure(figsize=(8,5))
for pollutant in y.columns:
    subset = results_df[results_df["Pollutant"] == pollutant]
    plt.bar(subset["Model"], subset["RMSE"], label=pollutant)
plt.title("RMSE Comparison: Linear vs KNN Regression")
plt.ylabel("RMSE")
plt.show()



# %%
# Scatter plot: Actual vs Predicted for CO (example)
plt.figure(figsize=(6,6))
plt.scatter(y_test["CO(GT)"], y_pred_lin[:,0], alpha=0.6, label="Linear Regression")
plt.scatter(y_test["CO(GT)"], y_pred_knn[:,0], alpha=0.6, label="KNN Regression")
plt.plot([y_test["CO(GT)"].min(), y_test["CO(GT)"].max()],
         [y_test["CO(GT)"].min(), y_test["CO(GT)"].max()],
         "r--")  # Perfect prediction line
plt.title("CO(GT): Actual vs Predicted")
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.legend()
plt.show()

# %%
results = []

for i, col in enumerate(y.columns):
    # Linear Regression
    mse_lin = mean_squared_error(y_test.iloc[:, i], y_pred_lin[:, i])
    rmse_lin = np.sqrt(mse_lin)
    r2_lin = r2_score(y_test.iloc[:, i], y_pred_lin[:, i])
    
    # KNN Regression
    mse_knn = mean_squared_error(y_test.iloc[:, i], y_pred_knn[:, i])
    rmse_knn = np.sqrt(mse_knn)
    r2_knn = r2_score(y_test.iloc[:, i], y_pred_knn[:, i])
    
    results.append({
        "Pollutant": col,
        "Linear RMSE": rmse_lin,
        "Linear RÂ²": r2_lin,
        "KNN RMSE": rmse_knn,
        "KNN RÂ²": r2_knn
    })

    results_df = pd.DataFrame(results)
print("\nðŸ”¹ Model Comparison Results:")
print(results_df)

# %%
results_df.plot(
    x="Pollutant",
    y=["Linear RMSE", "KNN RMSE"],
    kind="bar",
    figsize=(10, 6)
)
plt.title("RMSE Comparison: Linear vs KNN Regression")
plt.ylabel("RMSE (Lower = Better)")
plt.xticks(rotation=45)
plt.show()


# %%
pollutant = y.columns[0]

plt.figure(figsize=(12,5))
plt.subplot(1, 2, 1)
plt.scatter(y_test.iloc[:,0], y_pred_lin[:,0], alpha=0.6, color='blue')
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.title(f"Linear Regression: {pollutant}")

plt.subplot(1, 2, 2)
plt.scatter(y_test.iloc[:,0], y_pred_knn[:,0], alpha=0.6, color='green')
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.title(f"KNN Regression: {pollutant}")

plt.tight_layout()
plt.show()


